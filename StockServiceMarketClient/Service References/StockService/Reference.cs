//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockServiceMarketClient.StockService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StockService.IStockDirectory")]
    public interface IStockDirectory {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/OrderStock", ReplyAction="http://tempuri.org/IStockDirectory/OrderStockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StockMarket.Faults.StockServiceFault), Action="http://tempuri.org/IStockDirectory/OrderStockStockServiceFaultFault", Name="StockServiceFault", Namespace="http://schemas.datacontract.org/2004/07/StockMarket.Faults")]
        StockServiceContracts.StockOrder OrderStock(string company, int quantity, StockServiceContracts.StockOrder.OrderType type, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/OrderStock", ReplyAction="http://tempuri.org/IStockDirectory/OrderStockResponse")]
        System.Threading.Tasks.Task<StockServiceContracts.StockOrder> OrderStockAsync(string company, int quantity, StockServiceContracts.StockOrder.OrderType type, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/ExecuteOrder", ReplyAction="http://tempuri.org/IStockDirectory/ExecuteOrderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StockMarket.Faults.OrderNotFoundFault), Action="http://tempuri.org/IStockDirectory/ExecuteOrderOrderNotFoundFaultFault", Name="OrderNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/StockMarket.Faults")]
        void ExecuteOrder(int id, float stockValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/ExecuteOrder", ReplyAction="http://tempuri.org/IStockDirectory/ExecuteOrderResponse")]
        System.Threading.Tasks.Task ExecuteOrderAsync(int id, float stockValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/GetAllOrders", ReplyAction="http://tempuri.org/IStockDirectory/GetAllOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StockMarket.Faults.StockServiceFault), Action="http://tempuri.org/IStockDirectory/GetAllOrdersStockServiceFaultFault", Name="StockServiceFault", Namespace="http://schemas.datacontract.org/2004/07/StockMarket.Faults")]
        StockServiceContracts.StockOrder[] GetAllOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/GetAllOrders", ReplyAction="http://tempuri.org/IStockDirectory/GetAllOrdersResponse")]
        System.Threading.Tasks.Task<StockServiceContracts.StockOrder[]> GetAllOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/GetClientOrders", ReplyAction="http://tempuri.org/IStockDirectory/GetClientOrdersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StockMarket.Faults.StockServiceFault), Action="http://tempuri.org/IStockDirectory/GetClientOrdersStockServiceFaultFault", Name="StockServiceFault", Namespace="http://schemas.datacontract.org/2004/07/StockMarket.Faults")]
        StockServiceContracts.StockOrder[] GetClientOrders(string clientEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/GetClientOrders", ReplyAction="http://tempuri.org/IStockDirectory/GetClientOrdersResponse")]
        System.Threading.Tasks.Task<StockServiceContracts.StockOrder[]> GetClientOrdersAsync(string clientEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/RegisterOnNewOrder", ReplyAction="http://tempuri.org/IStockDirectory/RegisterOnNewOrderResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockMarket.Faults.StockServiceFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockMarket.Faults.OrderNotFoundFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder.OrderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder[]))]
        int RegisterOnNewOrder(object callback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/RegisterOnNewOrder", ReplyAction="http://tempuri.org/IStockDirectory/RegisterOnNewOrderResponse")]
        System.Threading.Tasks.Task<int> RegisterOnNewOrderAsync(object callback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/RegisterOnOrderStatusChange", ReplyAction="http://tempuri.org/IStockDirectory/RegisterOnOrderStatusChangeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(StockMarket.Faults.OrderNotFoundFault), Action="http://tempuri.org/IStockDirectory/RegisterOnOrderStatusChangeOrderNotFoundFaultF" +
            "ault", Name="OrderNotFoundFault", Namespace="http://schemas.datacontract.org/2004/07/StockMarket.Faults")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockMarket.Faults.StockServiceFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockMarket.Faults.OrderNotFoundFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder.OrderType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(StockServiceContracts.StockOrder[]))]
        int RegisterOnOrderStatusChange(int id, object callback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockDirectory/RegisterOnOrderStatusChange", ReplyAction="http://tempuri.org/IStockDirectory/RegisterOnOrderStatusChangeResponse")]
        System.Threading.Tasks.Task<int> RegisterOnOrderStatusChangeAsync(int id, object callback);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStockDirectory/UnregisterOnNewOrder")]
        void UnregisterOnNewOrder(int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStockDirectory/UnregisterOnNewOrder")]
        System.Threading.Tasks.Task UnregisterOnNewOrderAsync(int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStockDirectory/UnregisterOnOrderStatusChange")]
        void UnregisterOnOrderStatusChange(int orderId, int callbackId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IStockDirectory/UnregisterOnOrderStatusChange")]
        System.Threading.Tasks.Task UnregisterOnOrderStatusChangeAsync(int orderId, int callbackId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockDirectoryChannel : StockServiceMarketClient.StockService.IStockDirectory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockDirectoryClient : System.ServiceModel.ClientBase<StockServiceMarketClient.StockService.IStockDirectory>, StockServiceMarketClient.StockService.IStockDirectory {
        
        public StockDirectoryClient() {
        }
        
        public StockDirectoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockDirectoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockDirectoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockDirectoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public StockServiceContracts.StockOrder OrderStock(string company, int quantity, StockServiceContracts.StockOrder.OrderType type, string email) {
            return base.Channel.OrderStock(company, quantity, type, email);
        }
        
        public System.Threading.Tasks.Task<StockServiceContracts.StockOrder> OrderStockAsync(string company, int quantity, StockServiceContracts.StockOrder.OrderType type, string email) {
            return base.Channel.OrderStockAsync(company, quantity, type, email);
        }
        
        public void ExecuteOrder(int id, float stockValue) {
            base.Channel.ExecuteOrder(id, stockValue);
        }
        
        public System.Threading.Tasks.Task ExecuteOrderAsync(int id, float stockValue) {
            return base.Channel.ExecuteOrderAsync(id, stockValue);
        }
        
        public StockServiceContracts.StockOrder[] GetAllOrders() {
            return base.Channel.GetAllOrders();
        }
        
        public System.Threading.Tasks.Task<StockServiceContracts.StockOrder[]> GetAllOrdersAsync() {
            return base.Channel.GetAllOrdersAsync();
        }
        
        public StockServiceContracts.StockOrder[] GetClientOrders(string clientEmail) {
            return base.Channel.GetClientOrders(clientEmail);
        }
        
        public System.Threading.Tasks.Task<StockServiceContracts.StockOrder[]> GetClientOrdersAsync(string clientEmail) {
            return base.Channel.GetClientOrdersAsync(clientEmail);
        }
        
        public int RegisterOnNewOrder(object callback) {
            return base.Channel.RegisterOnNewOrder(callback);
        }
        
        public System.Threading.Tasks.Task<int> RegisterOnNewOrderAsync(object callback) {
            return base.Channel.RegisterOnNewOrderAsync(callback);
        }
        
        public int RegisterOnOrderStatusChange(int id, object callback) {
            return base.Channel.RegisterOnOrderStatusChange(id, callback);
        }
        
        public System.Threading.Tasks.Task<int> RegisterOnOrderStatusChangeAsync(int id, object callback) {
            return base.Channel.RegisterOnOrderStatusChangeAsync(id, callback);
        }
        
        public void UnregisterOnNewOrder(int callbackId) {
            base.Channel.UnregisterOnNewOrder(callbackId);
        }
        
        public System.Threading.Tasks.Task UnregisterOnNewOrderAsync(int callbackId) {
            return base.Channel.UnregisterOnNewOrderAsync(callbackId);
        }
        
        public void UnregisterOnOrderStatusChange(int orderId, int callbackId) {
            base.Channel.UnregisterOnOrderStatusChange(orderId, callbackId);
        }
        
        public System.Threading.Tasks.Task UnregisterOnOrderStatusChangeAsync(int orderId, int callbackId) {
            return base.Channel.UnregisterOnOrderStatusChangeAsync(orderId, callbackId);
        }
    }
}
